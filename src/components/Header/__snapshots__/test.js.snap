// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[Component] Header Display Header Component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <WithStyles(Grid)
        item={true}
>
        <WithStyles(Typography)
                style={
                        Object {
                                "color": "#fff",
                                "fontSize": 50,
                              }
                }
                variant="subtitle1"
        >
                MyReads
        </WithStyles(Typography)>
</WithStyles(Grid)>,
      "container": true,
      "direction": "row",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <WithStyles(Typography)
          style={
                    Object {
                              "color": "#fff",
                              "fontSize": 50,
                            }
          }
          variant="subtitle1"
>
          MyReads
</WithStyles(Typography)>,
        "item": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "MyReads",
          "style": Object {
            "color": "#fff",
            "fontSize": 50,
          },
          "variant": "subtitle1",
        },
        "ref": null,
        "rendered": "MyReads",
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <WithStyles(Grid)
          item={true}
>
          <WithStyles(Typography)
                    style={
                              Object {
                                        "color": "#fff",
                                        "fontSize": 50,
                                      }
                    }
                    variant="subtitle1"
          >
                    MyReads
          </WithStyles(Typography)>
</WithStyles(Grid)>,
        "container": true,
        "direction": "row",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Typography)
            style={
                        Object {
                                    "color": "#fff",
                                    "fontSize": 50,
                                  }
            }
            variant="subtitle1"
>
            MyReads
</WithStyles(Typography)>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "MyReads",
            "style": Object {
              "color": "#fff",
              "fontSize": 50,
            },
            "variant": "subtitle1",
          },
          "ref": null,
          "rendered": "MyReads",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
