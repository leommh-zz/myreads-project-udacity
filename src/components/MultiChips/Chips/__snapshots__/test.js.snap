// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[Components] MapChips and ItemChip Display ItemChip Component with props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    item={
        Array [
            "item",
          ]
    }
    style={
        Object {
            "chip": Object {
              "color": "#fff",
            },
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <WithStyles(Chip)
        label={
                Array [
                        "item",
                      ]
        }
        style={
                Object {
                        "color": "#fff",
                      }
        }
/>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "label": Array [
          "item",
        ],
        "style": Object {
          "color": "#fff",
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <WithStyles(Chip)
          label={
                    Array [
                              "item",
                            ]
          }
          style={
                    Object {
                              "color": "#fff",
                            }
          }
/>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "label": Array [
            "item",
          ],
          "style": Object {
            "color": "#fff",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`[Components] MapChips and ItemChip Display MapChips Component with props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    items={
        Array [
            "item1",
            "item2",
          ]
    }
    style={
        Object {
            "chip": Object {
              "color": "#fff",
            },
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(Grid)
          item={true}
>
          <WithStyles(Chip)
                    label="item1"
                    style={
                              Object {
                                        "color": "#fff",
                                      }
                    }
          />
</WithStyles(Grid)>,
        <WithStyles(Grid)
          item={true}
>
          <WithStyles(Chip)
                    label="item2"
                    style={
                              Object {
                                        "color": "#fff",
                                      }
                    }
          />
</WithStyles(Grid)>,
      ],
      "container": true,
      "direction": "row",
      "spacing": 8,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "item1",
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Chip)
            label="item1"
            style={
                        Object {
                                    "color": "#fff",
                                  }
            }
/>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "label": "item1",
            "style": Object {
              "color": "#fff",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "item2",
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Chip)
            label="item2"
            style={
                        Object {
                                    "color": "#fff",
                                  }
            }
/>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "label": "item2",
            "style": Object {
              "color": "#fff",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(Grid)
            item={true}
>
            <WithStyles(Chip)
                        label="item1"
                        style={
                                    Object {
                                                "color": "#fff",
                                              }
                        }
            />
</WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
>
            <WithStyles(Chip)
                        label="item2"
                        style={
                                    Object {
                                                "color": "#fff",
                                              }
                        }
            />
</WithStyles(Grid)>,
        ],
        "container": true,
        "direction": "row",
        "spacing": 8,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "item1",
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Chip)
              label="item1"
              style={
                            Object {
                                          "color": "#fff",
                                        }
              }
/>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "label": "item1",
              "style": Object {
                "color": "#fff",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "item2",
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Chip)
              label="item2"
              style={
                            Object {
                                          "color": "#fff",
                                        }
              }
/>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "label": "item2",
              "style": Object {
                "color": "#fff",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
